// Copyright (c) 2014-2020 Zephir Team
//
// This source file is subject the MIT license, that is bundled with
// this package in the file LICENSE, and is available through the
// world-wide-web at the following url:
//
// https://github.com/zephir-lang/idea-plugin/blob/master/LICENSE

{
    parserClass='com.zephir.lang.core.parser.ZephirParser'
    parserUtilClass='com.zephir.lang.core.parser.manual.ZephirManualParseRules'

    extends='com.intellij.extapi.psi.ASTWrapperPsiElement'

    psiClassPrefix='Zephir'
    psiImplClassSuffix='Impl'
    psiPackage='com.zephir.lang.core.psi'
    psiImplPackage='com.zephir.lang.core.psi.impl'

    elementTypeHolderClass='com.zephir.lang.core.psi.ZephirTypes'
    elementTypeClass='com.zephir.lang.core.psi.ZephirElementType'
    tokenTypeClass='com.zephir.lang.core.psi.ZephirTokenType'
    // TODO(serghei): Do we need this?
    // Also see: https://github.com/JetBrains/gradle-grammar-kit-plugin/issues/3
    psiImplUtilClass='com.zephir.lang.core.psi.impl.ZephirPsiImplUtil'

    tokens = [
        // regex
        COMMENT            = 'regexp://.*'
        COMMENT_BLOCK      = 'regexp:(/\*([^*]+|[*]+[^/*])*[*]*\*/)'
        IDENTIFIER         = 'regexp:[_a-zA-Z][a-zA-Z0-9_]*'
        INTEGER            = 'regexp:([\-]?[0-9]+)|([\-]?[0][x][0-9A-Fa-f]+)'
        DOUBLE             = 'regexp:([\-]?[0-9]+[.][0-9]+)'
        SCHAR              = "regexp:(['] ([^'\\]|\\.)* ['])"
        STRING             = 'regexp:(["] ([^"\\]|\\.)* ["])'
        CBLOCK             = 'regexp:%[{]([^}]+|[}]+[^%{])*[}]%'

        // OOP Keywords
        INTERNAL           = 'internal'
        NAMESPACE          = 'namespace'
        USE                = 'use'
        AS                 = 'as'
        INTEFACE           = 'interface'
        CLASS              = 'class'
        FUNCTION           = 'function'
        EXTENDS            = 'extends'
        IMPLEMENTS         = 'implements'
        ABSTRACT           = 'abstract'
        FINAL              = 'final'
        PUBLIC             = 'public'
        PROTECTED          = 'protected'
        PRIVATE            = 'private'
        STATIC             = 'static'
        INLINE             = 'inline'
        DEPRECATED         = 'deprecated'

        // Types
        TYPE_VAR           = 'var'
        TYPE_VOID          = 'void'
        TYPE_INT           = 'int'
        TYPE_UINT          = 'uint'
        TYPE_LONG          = 'long'
        TYPE_ULONG         = 'ulong'
        TYPE_CHAR          = 'char'
        TYPE_UCHAR         = 'uchar'
        TYPE_DOUBLE        = 'double'
        TYPE_BOOL          = 'bool'
        TYPE_STRING        = 'string'
        TYPE_ARRAY         = 'array'
        TYPE_OBJECT        = 'object'
        TYPE_CALLABLE      = 'callable'
        TYPE_RESOURCE      = 'resource'

        // Value Keywords
        NULL               = 'null'
        FALSE              = 'false'
        TRUE               = 'true'

        // Keywords
        LET                = 'let'
        ECHO               = 'echo'
        CONST              = 'const'
        IF                 = 'if'
        ELSE               = 'else'
        ELSEIF             = 'elseif'
        SWITCH             = 'switch'
        CASE               = 'case'
        DEFAULT            = 'default'
        DO                 = 'do'
        WHILE              = 'while'
        FOR                = 'for'
        LOOP               = 'loop'
        REVERSE            = 'reverse'
        BREAK              = 'break'
        CONTINUE           = 'continue'
        IN                 = 'in'
        NEW                = 'new'
        RETURN             = 'return'
        REQUIRE            = 'require'
        CLONE              = 'clone'
        EMPTY              = 'empty'
        TYPEOF             = 'typeof'
        INSTANCEOF         = 'instanceof'
        LIKELY             = 'likely'
        UNLIKELY           = 'unlikely'
        ISSET              = 'isset'
        UNSET              = 'unset'
        THROW              = 'throw'
        FETCH              = 'fetch'
        TRY                = 'try'
        CATCH              = 'catch'

        // Other
        PARENTHESES_OPEN   = '('
        PARENTHESES_CLOSE  = ')'
        BRACKET_OPEN       = '{'
        BRACKET_CLOSE      = '}'
        SBRACKET_OPEN      = '['
        SBRACKET_CLOSE     = ']'
        AT                 = '@'
        NOT                = '!'
        AND                = '&&'
        OR                 = '||'
        BITWISE_AND        = '&'
        BITWISE_OR         = '|'
        BITWISE_XOR        = '^'
        BITWISE_SHIFTLEFT  = '<<'
        BITWISE_SHIFTRIGHT = '>>'
        ASSIGN             = '='
        ADDASSIGN          = '+='
        SUBASSIGN          = '-='
        MULASSIGN          = '*='
        EXPASSIGN          = '**='
        DIVASSIGN          = '/='
        MODASSIGN          = '%='
        CONCATASSIGN       = '.='
        EQUALS             = '=='
        NOTEQUALS          = '!='
        IDENTICAL          = '==='
        NOTIDENTICAL       = '!=='
        LESSEQUAL          = '<='
        GREATEREQUAL       = '>='
        LESS               = '<'
        GREATER            = '>'
        ARROW              = '->'
        DOUBLECOLON        = '::'
        DOT                = '.'
        ADD                = '+'
        SUB                = '-'
        MUL                = '*'
        EXP                = '**'
        DIV                = '/'
        MOD                = '%'
        INCR               = '++'
        DECR               = '--'
        COLON              = ':'
        DOTCOMMA           = ';'
        COMMA              = ','
        QUESTION           = '?'
    ]

    extends(".*Expr") = Expr
}

// This is the grammar of the Zephir language which is used by Grammar Kit
// to generate the parser and the PSI classes. Rule `FooBar` corresponds
// to `ZephirFooBar` PSI class.
//
// Naming convention:
//
//   * tokens are lowercase: for, if, identifier
//   * rules are PascalCase: TopStatement, ArrayAccess
//   * lexer rules are UPPER_CASE: TYPE_UINT, DOUBLECOLON

File ::= TopStatement*

CBlock ::= CBLOCK

private TopStatement ::= NamespaceStatement ImportStatement* CBlock* (ClassDefinition | InterfaceDefinition)

PhpReserved ::= '$resource' | '$namespace' | '$internal'

NamespaceStatement ::= 'namespace' ComplexId ';' {pin=2}

ImportStatement ::= 'use' ComplexId ('as' Id)? ';' {pin=2}

ClassDefinition ::= ClassModifier? 'class' Id SuperClass? ImplementsList? ClassBody {pin=3}

private ClassModifier ::= 'abstract' | 'final'

SuperClass ::= 'extends' ComplexId {pin=1}
ImplementsList ::= 'implements' ComplexIdList {pin=1}
ClassBody ::= '{' ClassMember* '}' {pin=1}

private ClassMember ::= ConstantDefinition |
                        PropertyDefinition |
                        MethodDefinition |
                        AbstractMethodDefinition

InterfaceDefinition ::= 'interface' Id SuperInterfaces? InterfaceBody {pin=2}
SuperInterfaces ::= 'extends' ComplexIdList {pin=1}
InterfaceBody ::= '{' InterfaceMember* '}' {pin=1}

private InterfaceMember ::= ConstantDefinition |
                            InterfaceMethodDefinition

InterfaceMethodDefinition ::= MethodHeader '(' Arguments* ')' ReturnType? ';' {pin=2}
AbstractMethodDefinition ::= 'abstract' InterfaceMethodDefinition

ConstantDefinition ::= 'const' Id DefaultValue? ';' {pin=2}

PropertyDefinition ::= 'static'? Visibility 'static'?  Id DefaultValue? MemberMetaAccess? ';' {pin=4}

private MemberMetaAccess ::= '{' MemberMetaModifier (',' MemberMetaModifier)* '}' {pin=1}
private MemberMetaModifier ::= 'get' | 'set' | '__toString'

MethodDefinition ::= MethodHeader '(' Arguments* ')' ReturnType? MethodBody {pin=2}
MethodModifiers ::= 'static' | 'inline' | 'deprecated' | 'final'
MethodBody ::= CodeBlock

private MethodHeader ::= (Visibility | MethodModifiers)* FUNCTION Id

CodeBlock ::= '{' Code* '}' {pin=1}

ReturnType ::= '->' (Type | 'null') ('|' (Type | 'null'))* {pin(".*")=1}

Arguments ::= Argument (',' Argument)* {pin(".*")=1}
Argument ::= Type? '!'? (PhpReserved | Id) DefaultValue? {pin=3}

DefaultValue ::= '=' Expr {pin=1}
Visibility ::= 'public' | 'protected' | 'private'

Id ::= '$'?IDENTIFIER

ComplexId ::= '$'? '\'? Id ('\' Id)* {pin(".*")=3}
ComplexIdList ::= ComplexId (',' ComplexId)* {pin(".*")=1}

Type ::= VoidType | ScalarType | ClassType | ResourceType
ScalarType ::= 'var' | NumberType | StringType | BoolType | 'array' | 'object' | 'callable' | 'resource'

private StringType ::= 'string' | 'char' | 'uchar'
private BoolType ::= 'bool' | 'boolean'
private NumberType ::= IntType | DoubleType | 'uint' | 'long' | 'ulong'
private IntType ::= 'int' | 'integer'
private DoubleType ::= 'double' | 'float'
private ClassType ::= '<' ComplexId ArrayAppendExpr? '>'
private ResourceType ::= '<' '$'ComplexId ArrayAppendExpr? '>'
private VoidType ::= 'void'

Code ::= DeclarationStatement |
         LetStatement |
         CallStatement |
         ChainOfCallStatement |
         ControlStatement |
         LoopStatement |
         SwitchStatement |
         IfStatement |
         TryStatement |
         ReturnStatement |
         EchoStatement |
         ThrowStatement |
         RequireStatement |
         UnsetStatement |
         CBlock

DeclarationStatement ::= Type DeclarationStatementElement (',' DeclarationStatementElement)* ';' {pin(".*")=1}

private DeclarationStatementElement ::= (Id | PhpReserved) DefaultValue?

LetStatement ::= 'let' ChangeVariableExpr (',' ChangeVariableExpr)* ';' {pin(".*")=1}

ChangeVariableExpr ::= AssignmentExpr | IncrementExpr
AssignmentExpr ::= (Typecast | Type)? (Variable | ExplodedVariable | PhpReserved) ArrayAppendExpr? AssignmentOperator (Typecast | Type)?  (PhpReserved | Expr) { rightAssociative=true }

private ArrayAppendExpr ::= '[' ']'

AssignmentOperator ::= '=' | '+=' | '-=' | '*=' | '**=' | '/=' | '%=' | '.='
Typecast ::= '(' ScalarType ')' | '<' ComplexId '>'

IncrementExpr ::= Variable IncrementOperator {rightAssociative=true}
IncrementOperator ::= '++' | '--'

CallStatement ::= CallExpr ';'

ControlStatement ::= ('continue' | 'break') ';'

LoopStatement ::= InfinityLoopStatement |
                   WhileLoopStatement |
                   ForeachLoopStatement

InfinityLoopStatement ::= 'loop' CodeBlock {pin=1}

WhileLoopStatement ::= 'while' Expr CodeBlock {pin=2}

ForeachLoopStatement ::= 'for' Id (',' Id)? 'in' 'reverse'? (PhpReserved | Expr) CodeBlock {pin=2}
UnsetStatement ::= 'unset' (Variable | '(' Variable ')') ';'

SwitchStatement ::= 'switch' Expr '{' CaseExpr*  '}' {pin=1}
StaticCallExpr ::= ((('{' Id '}') | 'static') '::') CallExpr {pin=1}

CaseExpr ::= ('case' Expr | 'default') ':' Code* {pin=1}

IfStatement ::= 'if' ('likely' | 'unlikely')? Expr CodeBlock ElseifStatements* ElseStatement? {pin=1}
ElseifStatements ::= 'elseif' Expr CodeBlock {pin=1}
ElseStatement ::= 'else' CodeBlock {pin=1}

TryStatement ::= 'try' CodeBlock CatchBlock*  {pin=1}
CatchBlock ::= 'catch' ClassType? ComplexId (',' ComplexId)* CodeBlock {pin=3}

ReturnStatement ::= 'return' (RequireStatement | (Typecast? Expr? ';'))

EchoStatement ::= 'echo' Expr (',' Expr)* ';' {pin(".*")=1}

ThrowStatement ::= 'throw' Expr ';' {pin=1}
RequireStatement ::= RequireExpr ';' {pin=1}

private RequireExpr ::= 'require' Expr

Expr ::= UnaryExpr |
         BitExpr |
         BoolGroupExpr |
         MathExpr |
         PrimaryGroupExpr |
         SpecialGroupExpr

private BoolGroupExpr ::= BoolExpr | TernaryExpr | EmptyExpr | IssetExpr | FetchExpr | InstanceofExpr
private PrimaryGroupExpr ::= ChainOfCallExpr | StaticCallExpr | LiteralExpr | ParenExpr | PrecastExpr | CallbackExpr | CallExpr | CloneExpr
private SpecialGroupExpr ::= NewExpr | TypeofExpr

ChainOfCallStatement ::= ChainOfCallExpr ;
ChainOfCallExpr ::= (ParenExpr '->') Expr

BitExpr ::= Expr BitOperator Expr
BitOperator ::= '&' | '|' | '^' | '>>' | '<<'

MathExpr ::= Expr MathOperator Expr
MathOperator ::= '+' | '-' | '*' | '**' | '/' | '%' | '.'

UnaryExpr ::= ('+' | '-' | '!') Expr
BoolExpr ::= Expr BoolOperator Expr
BoolOperator ::= '&&' | '||' | '>' | '<' | '==' | '>=' | '<=' | '===' | '!=' | '!=='

TernaryExpr ::= Expr '?' Expr ':' Expr {pin=1}
LiteralExpr ::= Typecast? (Variable | scalar)
ParenExpr ::= '(' Expr ')' {pin=1}
PrecastExpr ::= '{' Expr '}' {pin=1}

EmptyExpr ::= 'empty' Expr {pin=1}
IssetExpr ::= 'isset' Expr {pin=1}
FetchExpr ::= 'fetch' Id ',' Expr {pin=2}
InstanceofExpr ::= Variable 'instanceof' Expr {pin=2}

CallExpr ::=  Expr '(' CallArguments? ')' ('->' Id '(' CallArguments? ')')* ArrayAccess? {pin=3}
MagicCallExpr ::= '$'('clone' | 'fetch') '(' Arguments* ')'
CallbackExpr ::= 'function' '(' Arguments* ')' CodeBlock {pin=1}
CloneExpr ::= 'clone' Variable

NewExpr ::= NewExprClassic | NewExprDynamic

private NewExprClassic ::= 'new' ComplexId ('(' CallArguments? ')')? {pin=2}
private NewExprDynamic ::= 'new' '{' Expr '}' ('(' CallArguments? ')')? {pin=2}

TypeofExpr ::= 'typeof' Expr {pin=1}

CallArguments ::= CallArgument (',' CallArgument)* {pin(".*")=1}

private CallArgument ::= 'require'? Typecast? (PhpReserved | Expr)
private ScalarShort ::= STRING  | SCHAR | DOUBLE | INTEGER | ScalarValue

scalar ::= ScalarShort | ArrayValue
ScalarValue ::= 'null' | 'true' | 'false'

ArrayValue ::= '[' ArrayBody? ']' {pin=1}

private ArrayBody ::= ArrayItem (',' ArrayItem)* {pin(".*")=1}

ArrayItem ::= ArrayKeyValue | Expr
ArrayKeyValue ::= (ScalarShort | Expr) ':' Expr

Variable ::= ComplexId (PropertyAccess | ArrayAppendExpr |  ArrayAccess)*
ExplodedVariable ::= '{' Variable '}'

private PropertyAccess ::= ('::' | '->') (Variable | '{' (STRING | Id) '}' | MagicCallExpr) {pin=2}
private ArrayAccess ::= '[' (Expr | PhpReserved) ']' {pin=1}
